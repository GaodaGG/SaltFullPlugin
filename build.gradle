plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
    id 'org.jetbrains.kotlin.kapt' version '2.0.21'
}

group = 'com.gg.saltPlayerPlugin'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://jitpack.io'
    }
}

dependencies {
//    implementation "com.code-disaster.steamworks4j:steamworks4j:1.9.0"
    // https://mvnrepository.com/artifact/net.java.dev.jna/jna-platform
    compileOnly 'net.java.dev.jna:jna-platform:5.17.0'
    compileOnly 'net.java.dev.jna:jna:5.17.0'

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:2.0.21"
    compileOnly "com.github.Moriafly:spw-workshop-api:0.1.0-dev14"
    kapt "com.github.Moriafly:spw-workshop-api:0.1.0-dev14"

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

def pluginClass = "com.gg.SaltFullPlugin.MainPlugin"
def pluginId = "com.gg.SaltFullPlugin"
def pluginName = "全屏化SPW窗口"
def pluginVersion = "0.1.0"
def pluginProvider = "GaodaGG"
def pluginDescription = "将SPW窗口全屏化"
def pluginOpenSourceUrl = "https://github.com/GaodaGG/SaltFullPlugin"

tasks.named("jar") {
    destinationDirectory = file(System.getenv("APPDATA") + "/Salt Player for Windows/workshop/plugins/")
    archiveFileName = "plugin-${pluginId}-${pluginVersion}.jar"

    manifest {
        attributes["Plugin-Class"] = pluginClass
        attributes["Plugin-Id"] = pluginId
        attributes["Plugin-Name"] = pluginName
        attributes["Plugin-Version"] = pluginVersion
        attributes["Plugin-Provider"] = pluginProvider
        attributes["Plugin-Description"] = pluginDescription
        attributes["Plugin-Open-Source-Url"] = pluginOpenSourceUrl
    }
}

tasks.register("plugin", Jar) {
    destinationDirectory = file(System.getenv("APPDATA") + "/Salt Player for Windows/workshop/plugins/")
    archiveFileName = "plugin-${pluginName}-${pluginVersion}.zip"
    archiveBaseName.set("plugin-" + pluginName + "-" + pluginVersion)

    into("classes") {
        with(tasks.named("jar").get())
    }
    dependsOn(configurations.runtimeClasspath)
    into("lib") {
        from({
            configurations.runtimeClasspath
                    .filter { it.name.endsWith("jar") }
        })
    }
    archiveExtension = 'zip'
}